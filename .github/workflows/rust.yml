---
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

  workflow_dispatch: {}

env:
  CACHE_VERSION: v1
  RUSTC_WRAPPER: "/home/runner/.cargo/bin/sccache"
  SCCACHE_VERSION: 0.5.4

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-build-${{ hashFiles('**/Cargo.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
            ~/.rustup/
            target/
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-build-
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}
      - run: lib/install-sccache
      - run: lib/install-wasm-pack
      - uses: dtolnay/rust-toolchain@stable
        with:
          # also include wasm
          targets: wasm32-unknown-unknown
      - run: cargo build --release --all

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-test-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
            ~/.rustup/
            target/
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-test-
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}
      - run: lib/install-sccache
      - run: lib/install-wasm-pack
      - uses: dtolnay/rust-toolchain@stable
        with:
          # also include wasm
          targets: wasm32-unknown-unknown
      - run: cargo test --all-features

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-audit-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache/
            ~/.rustup/
            target/
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-audit-
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}
      - run: lib/install-sccache
      # NOTE don't need any other targets, just need to audit the source code
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-audit
      - run: cargo audit

  docker:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - audit
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          path: |
            target/
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-${{ matrix.arch }}-
      # setup buildx
      - uses: docker/setup-buildx-action@v3
      # setup multi-platform
      - uses: docker/setup-qemu-action@v3
      # establish image name/labels/tags
      - id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/naftulikay/lambda-ecr-rewrite-${{ matrix.arch }}
          tags: |
            type=edge,branch=main
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=
            type=sha,format=long,prefix=
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}

      # cache the target directory with the build cache mount
      - uses: reproducible-containers/buildkit-cache-dance@v2.1.3
        with:
          cache-source: target
          cache-target: /usr/src/app/target
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.action }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # build the image for the given arch
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: |
            ARCH=${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.arch }}
