name: rust

on:
  workflow_call:
    inputs:
      cache_version:
        type: string
        default: v1
      cargo_audit_ignores:
        type: string
        default: ''
        description: |-
          Line-delimited string list of Rust CVEs to ignore.
      cargo_audit_version:
        type: string
        default: '0.21.2'

env:
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-${{ github.sha }}
          path: |
            ~/.cache/sccache
            ~/.cargo/.crates*
            ~/.cargo/bin/
            ~/.cargo/binstall/
            ~/.cargo/registry/cache/
            ~/.cargo/registry/index/
            ~/.cargo/git/db/
            target/
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-
      - uses: dtolnay/rust-toolchain@stable
      # install sccache
      - uses: mozilla-actions/sccache-action@v0.0.8
      # install mold
      - uses: rui314/setup-mold@v1
      # easily install any rust bins without building them
      - uses: cargo-bins/cargo-binstall@main
      # install cargo-auditable to produce the binary
      - run: cargo binstall -y cargo-auditable
      # build
      - run: cargo auditable build --bins --workspace --release

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-${{ github.sha }}
          path: |
            ~/.cache/sccache
            ~/.cargo/.crates*
            ~/.cargo/bin/
            ~/.cargo/binstall/
            ~/.cargo/registry/cache/
            ~/.cargo/registry/index/
            ~/.cargo/git/db/
            target/
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-
      - uses: dtolnay/rust-toolchain@stable
      # install sccache
      - uses: mozilla-actions/sccache-action@v0.0.8
      # install mold
      - uses: rui314/setup-mold@v1
      # easily install any rust bins without building them
      - uses: cargo-bins/cargo-binstall@main
      # test
      - run: cargo test --workspace

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-${{ github.sha }}
          path: |
            ~/.cache/sccache
            ~/.cargo/.crates*
            ~/.cargo/bin/
            ~/.cargo/binstall/
            ~/.cargo/registry/cache/
            ~/.cargo/registry/index/
            ~/.cargo/git/db/
            target/
          restore-keys: |
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-
            ${{ runner.os }}-${{ github.workflow }}-${{ inputs.cache_version }}-rust-${{ github.job }}-
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          targets: x86_64-unknown-linux-gnu,wasm32-unknown-unknown
      # install sccache
      - uses: mozilla-actions/sccache-action@v0.0.8
      # install mold
      - uses: rui314/setup-mold@v1
      # easily install any rust bins without building them
      - uses: cargo-bins/cargo-binstall@main
      # cargo check
      - run: cargo fmt --check --all
      - run: cargo check --workspace
      - run: cargo clippy --workspace

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      # install sccache (might not be required)
      - uses: mozilla-actions/sccache-action@v0.0.8
      # install mold
      - uses: rui314/setup-mold@v1
      # easily install any rust bins without building them
      - uses: cargo-bins/cargo-binstall@main
      # install cargo-audit
      - run: cargo binstall -y cargo-audit@${{ inputs.cargo_audit_version }}
      # run the audit
      - name: cargo audit
        run: |
          # include ignore flags for each item mentioned in the env var
          cargo audit $(echo "${{ inputs.cargo_audit_ignores }}" | while read ignore ; do
            if [ ! -z "${ignore}" ]; then
              echo "--ignore ${ignore}"
            fi
          done)

  docker:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - audit
      - format
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          path: |
            target/
          restore-keys: |
            ${{ runner.os }}-rust-${{ env.CACHE_VERSION }}-${{ github.job }}-${{ matrix.arch }}-
      # setup buildx
      - uses: docker/setup-buildx-action@v3
      # setup multi-platform
      - uses: docker/setup-qemu-action@v3
      # establish image name/labels/tags
      - id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/naftulikay/lambda-ecr-rewrite-${{ matrix.arch }}
          tags: |
            type=edge,branch=main
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=
            type=sha,format=long,prefix=
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}

      # cache the target directory with the build cache mount
      # FIXME this cache is being used by both architectures and overwriting/purging the cache, causing rebuilds to be
      #       from scratch!
      - uses: reproducible-containers/buildkit-cache-dance@v2.1.3
        with:
          cache-source: target
          cache-target: /usr/src/app/target
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.action }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # build the image for the given arch
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: |
            ARCH=${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.arch }}